// gl camera

import lib/devices/gl/gl.a
import lib/math.a

class Gl_camera {
	func function(var command, var left, var right, var bottom, var top, var near, var far) { // static
		var parameters = new(Gl.Parameters);
		parameters.command = command;
		
		parameters.left   = left;
		parameters.right  = right;
		parameters.bottom = bottom;
		parameters.top    = top;
		
		parameters.near = near;
		parameters.far  = far;
		
		var result = Gl.function(parameters);
		mfree parameters, Gl.Parameters;
		return result;
	}
	
	func frustum(var left, var right, var bottom, var top, var near, var far) return self.function(0x66, left, right, bottom, top, near, far); // static
	func ortho  (var left, var right, var bottom, var top, var near, var far) return self.function(0x6F, left, right, bottom, top, near, far); // static
	
	// matrix functions
	
	func matrix_function(var command, var x, var y, var z, var w) { // static
		var parameters = new(Gl.Parameters);
		parameters.command = command;
		
		parameters.x = x;
		parameters.y = y;
		parameters.z = z;
		parameters.w = w;
		
		var result = Gl.function(parameters);
		mfree parameters, Gl.Parameters;
		return result;
	}
	
	func load_identity return self.matrix_function(0x69); // static
	func translate(var x, var y, var z) return self.matrix_function(0x6D, x, y, z); // static
	func rotate(var x, var y, var z, var w) return self.matrix_function(0x72, x, y, z, w); // static
	func scale(var x, var y, var z) return self.matrix_function(0x73, x, y, z); // static
	
	func rotate_2d(var x, var y) { // static
		return self.matrix_function(0x72, Math.deg(x), 0, PRECISION, 0) + self.matrix_function(0x72, -Math.deg(y), Math.cos(x), 0, Math.sin(x));
	}
}
