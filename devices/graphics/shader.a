// gl shaders

import lib/devices/math/matrix.a

var default_shader_program = 0;

class Shader {
	Device->var device;
	var program;
	
	var vert_shader_code;
	var frag_shader_code;
	
	func construct(var vert_shader_code, var frag_shader_code) {
		self.vert_shader_code = vert_shader_code;
		self.frag_shader_code = frag_shader_code;
		
		self.device = new(Device).construct("shader");
		self.device.send 0x63, &self.program, self.vert_shader_code, self.frag_shader_code;
		
		return self;
	}
	
	func destruct {
		self.device.send 0x72, &self.program;
	}
	
	func default { // static
		Device.send "shader", 0x75, &default_shader_program;
	}
	
	func use { // hybrid
		if (self) self.device.send 0x75, &self.program;
		else default();
	}
	
	func find(var inform_name) {
		return ?self.device.send(0x66, &self.program, inform_name);
	}
	
	var INFORM_TYPE_FIXED = 0x00;
	var INFORM_TYPE_WHOLE = 0x01;
	
	var INFORM_SIZE_VALUE    = 0x00;
	var INFORM_SIZE_VECTOR_2 = 0x10;
	var INFORM_SIZE_VECTOR_3 = 0x20;
	var INFORM_SIZE_VECTOR_4 = 0x30;
	var INFORM_SIZE_MATRIX   = 0x40;
	
	func inform(var inform_location, var inform_type, var data) {
		var type = inform_type & 0x0F;
		var size = inform_type & 0xF0;
		
		/// TODO vectors
		
		if (size == Shader.INFORM_SIZE_MATRIX) { // data is matrix
			data = (Matrix->data).matrix;
		}
		
		self.device.send 0x6C, inform_location, inform_type, data;
	}
}
