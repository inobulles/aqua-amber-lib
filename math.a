// provides trigonometric and general useful math functions

import lib/device.a

class Math {
	// constants
	
	whole var PRECISION = 1000000;
	whole var PRECISION_ROOT = 1000;
	
	var TAU = 6.283185;
	var E = 2.718282;
	
	// core functions
	
	fixed func sin(fixed var x) return ?Device.send("math", 0x6E6973, x); // static
	fixed func tan(fixed var x) return ?Device.send("math", 0x6E6174, x); // static
	
	fixed func asin(fixed var x) return ?Device.send("math", 0x6E697361, x); // static
	fixed func atan(fixed var x) return ?Device.send("math", 0x6E617461, x); // static
	fixed func atan2(fixed var x, fixed var y) return ?Device.send("math", 0x326E617461, x, y); // static
	
	fixed func sinh(fixed var x) return ?Device.send("math", 0x686E6973, x); // static
	fixed func cosh(fixed var x) return ?Device.send("math", 0x68736973, x); // static
	fixed func tanh(fixed var x) return ?Device.send("math", 0x686E6174, x); // static
	
	fixed func root(fixed var index, fixed var x) return ?Device.send("math", 0x746F6F72, index, x); // static
	fixed func exp(fixed var x) return ?Device.send("math", 0x707865, x); // static
	fixed func log(fixed var base, fixed var x) return ?Device.send("math", 0x676F6C, base, x); // static
	
	fixed func sigmoid(fixed var x) return ?Device.send("math", 0x64696F6D676973, x); // static
	
	// derivative functions
	
	fixed func cos(fixed var x) return ?Device.send("math", 0x6E6973, x + Math.TAU / 4); // static
	
	fixed func sqrt(fixed var x) return root(2.0, x); // static
	fixed func cbrt(fixed var x) return root(3.0, x); // static
	
	fixed func log10(fixed var x) return log(10.0, x); // static
	fixed func ln(fixed var x) return log(Math.E, x); // static
	
	fixed func deg(fixed var x) return x * 360 / Math.TAU; // static
	
	fixed func pixels_x(whole var x) return x * Math.PRECISION / video_width (); // static
	fixed func pixels_y(whole var y) return y * Math.PRECISION / video_height(); // static
	
	func string_to_int(var string) { // static
		var value = 0;
		var exponent = 100000000000000000;
		
		var index = 0;
		loop {
			var current = *(string + index);
			if (not current) break
			
			value = value + (current - 0x30) * exponent;
			exponent = exponent / 10;
			index = index + 1;
		}
		
		return value / exponent / 10;
	}
	
	func min(var x, var y) { // static
		if (x < y) return x;
		else return y;
	}
	
	func max(var x, var y) { // static
		if (x > y) return x;
		else return y;
	}
	
	func abs(var x) { // static
		if (x < 0) return -x;
		return x;
	}
}
