// nice library for quickly implementing and handling a camera in 3D scenes

import lib/devices/input/joystick.a
import lib/devices/math/matrix.a

class Camera {
	// input methods
	
	Joystick->var joystick;
	
	// matrices
	
	Matrix->var model_view_matrix;
	Matrix->var projection_matrix;
	
	Matrix->var model_view_projection_matrix;
	
	// parameters (all values starting with an underscore are transition values)
	
	var trackball;
	
	var _fov; var fov; // field of view
	
	var _rx; var rx; // rotation around yaw axis
	var _ry; var ry; // rotation around pitch axis
	var _rz; var rz; // rotation around roll axis
	
	var _px; var px; // left / right position
	var _py; var py; // up / down position
	var _pz; var pz; // forwards / backwards position
	
	var _distance; var distance;
	
	func construct(var trackball, Matrix->var model_view_projection_matrix, Joystick->var joystick) {
		// input methods
		
		self.joystick = joystick;
		
		// matrices
		
		self.model_view_matrix = new(Matrix).construct();
		self.model_view_matrix.identity();
		
		self.projection_matrix = new(Matrix).construct();
		self.model_view_projection_matrix = model_view_projection_matrix;
		
		// parameters
		
		self.trackball = trackball;
		self.fov = MATH_TAU / 4;
		
		if (self.trackball) {
			self.distance = 3000000; // default trackball distance
		}
		
		return self;
	}
	
	func update(var fps) {
		// getting rotation inputs
		
		if (self.joystick) {
			//~ if (self.trackball) {
				//~ self.rx = self.rx - self.joystick.axis(2) / fps * 5;
				//~ self.ry = self.ry + self.joystick.axis(3) / fps * 5;
				
			//~ } else {
				self.rx = self.rx + self.joystick.axis(2) / fps * 4;
				self.ry = self.ry - self.joystick.axis(3) / fps * 4;
			//~ }
		}
		
		if (self.ry >  MATH_TAU / 4) self.ry =  MATH_TAU / 4;
		if (self.ry < -MATH_TAU / 4) self.ry = -MATH_TAU / 4;
		
		// getting strafe inputs
		var strafex = 0; var strafey = 0;
		
		if (self.joystick) {
			strafex = strafex + self.joystick.axis(0);
			strafey = strafey - self.joystick.axis(1);
		}
		
		if (strafex or strafey) {
			var player_speed = 1 * PRECISION;
			
			var strafe = Math.atan2(strafey, strafex);
			var speed = Math.max(Math.min(Math.sqrt(strafex * strafex + strafey * strafey) * (player_speed / PRECISION), player_speed), -player_speed);
			
			self.px = self.px + Math.mul_float(speed, Math.cos(self._rx - strafe)) / fps * 10;
			self.pz = self.pz + Math.mul_float(speed, Math.sin(self._rx - strafe)) / fps * 10;
			
		}
		
		// updating parameters
		
		self._fov = self._fov + (self.fov - self._fov) / fps * 5;
		
		self._rx = self._rx + (self.rx - self._rx) / fps * 10;
		self._ry = self._ry + (self.ry - self._ry) / fps * 10;
		self._rz = self._rz + (self.rz - self._rz) / fps * 10;
		
		self._px = self._px + (self.px - self._px) / fps * 10;
		self._py = self._py + (self.py - self._py) / fps * 10;
		self._pz = self._pz + (self.pz - self._pz) / fps * 10;
		
		if (self.trackball) {
			self._distance = self._distance + (self.distance - self._distance) / fps * 10;
		}
		
		// matrices
		
		self.projection_matrix.identity();
		self.projection_matrix.perspective self._fov, video_width() * PRECISION / video_height(), 100000, 500000000;
		
		self.model_view_matrix.identity();
		
		if (self.trackball) {
			self.model_view_matrix.translate 0, 0, -self._distance;
		}
		
		self.model_view_matrix.rotate_2d self._rx, self._ry, self._rz;
		self.model_view_matrix.translate -self._px, -self._py, -self._pz;
		
		self.model_view_projection_matrix.set self.model_view_matrix;
		self.model_view_projection_matrix.multiply self.projection_matrix;
	}
}
